//Problem Link : https://bit.ly/3RGnHLH

class Pair{
    int adjNode,weight;
    Pair(int adjNode , int weight){
        this.adjNode = adjNode;
        this.weight = weight;
    }
}
class Solution {
    
    public int[] shortestPath(int[][] edges,int n,int m ,int src) {
        
        List<List<Integer>> adj = new ArrayList<>();
        
        for(int i=0;i<n;i++)
            adj.add(new ArrayList<>());
        
        for(int i=0;i<m;i++){
            adj.get(edges[i][0]).add(edges[i][1]);
            adj.get(edges[i][1]).add(edges[i][0]);
        }
        
        int distance[] = new int[n];
        Arrays.fill(distance,Integer.MAX_VALUE);
        distance[src] = 0;
        
        Queue<Pair> q= new LinkedList<>();
        q.offer(new Pair(src,0));
        
        while(!q.isEmpty()){
            int node = q.peek().adjNode;
            int wt = q.peek().weight;
            q.poll();
            
            for(int currNode : adj.get(node)){
                if(wt+1 < distance[currNode]){
                    distance[currNode] = wt + 1;
                    q.offer(new Pair(currNode,wt+1));
                }
            }
        }
        
        for(int i=0;i<n;i++)
            if(distance[i]==Integer.MAX_VALUE)
                distance[i] = -1;
                
        return distance;
    }
}
