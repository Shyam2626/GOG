//Problem Link :https://bit.ly/3preQSc

//{ Driver Code Starts
// Initial Template for Java

// Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;

// Position this line where user code will be pasted.

class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
        PrintWriter out=new PrintWriter(System.out);
        int T = Integer.parseInt(in.readLine());
        while (T-- > 0) {
            String s[] = in.readLine().trim().split(" ");
            int n = Integer.parseInt(s[0]);
            int m = Integer.parseInt(s[1]);
            int a[][] = new int[n][m];
            for (int i = 0; i < n; i++) {
                s = in.readLine().trim().split(" ");
                for (int j = 0; j < m; j++) {
                    a[i][j] = Integer.parseInt(s[j]);
                }
            }
            Solution ob = new Solution();
            out.println(ob.numberOfEnclaves(a));
        }
        out.close();
    }
}
// } Driver Code Ends

class Solution {

    int numberOfEnclaves(int[][] grid) {

        int m=grid.length,n=grid[0].length;
        boolean visited[][]=new boolean[m][n];
        
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if((i==0 || j==0 || i==m-1 || j==n-1) && grid[i][j]==1){
                    dfs(i,j,visited,grid,m,n);
                }
            }
        }
        
        int enclavesCount=0;
        
        for(int i=0;i<m;i++)
            for(int j=0;j<n;j++)
                if(grid[i][j]==1 && !visited[i][j]) enclavesCount++;
                
        return enclavesCount;
        
    }
    
    void dfs(int r,int c,boolean[][] visited,int[][] grid,int m,int n){
        visited[r][c]=true;
        int arr1[]={0,1,0,-1};
        int arr2[]={1,0,-1,0};
        for(int i=0;i<4;i++){
            int nr=r+arr1[i];
            int nc=c+arr2[i];
            if(nr>=0 && nr<m && nc<n && nc>=0 && grid[nr][nc]==1 && !visited[nr][nc]){
                dfs(nr,nc,visited,grid,m,n);
            }
        }
    }
}
