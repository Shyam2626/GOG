//Problem Link : https://bit.ly/3oekoir

//{ Driver Code Starts
import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while(T-->0)
        {
            String[] s = br.readLine().trim().split(" ");
            int n = Integer.parseInt(s[0]);
            int m = Integer.parseInt(s[1]);
            int[][] grid = new int[n][m];
            for(int i = 0; i < n; i++){
                String[] S = br.readLine().trim().split(" ");
                for(int j = 0; j < m; j++){
                    grid[i][j] = Integer.parseInt(S[j]);
                }
            }
            Solution obj = new Solution();
            int ans = obj.orangesRotting(grid);
            System.out.println(ans);
        }
    }
}
// } Driver Code Ends

class Pair{
    int row,col,time;
    Pair(int row,int col,int time){
        this.row=row;
        this.col=col;
        this.time=time;
    }
}
class Solution
{
    public int orangesRotting(int[][] grid)
    {
        int m=grid.length,n=grid[0].length;
        
        Queue<Pair> q=new LinkedList<>();
        int visited[][]=new int[m][n];
        int cntOne=0;
        
        for(int i=0;i<m;i++)
            for(int j=0;j<n;j++){
                if(grid[i][j]==2){
                    q.offer(new Pair(i,j,0));
                    visited[i][j]=2;
                }else visited[i][j]=0;
                if(grid[i][j]==1)
                    cntOne++;
            }
            
        int time=0,count=0;
        int arr1[]={-1,0,1,0};
        int arr2[]={0,-1,0,1};
        
        while(!q.isEmpty()){
            
            int r=q.peek().row;
            int c=q.peek().col;
            int t=q.peek().time;
            
            time=Math.max(t,time);
            q.remove();
            for(int i=0;i<4;i++){
                int nr=r+arr1[i];
                int nc=c+arr2[i];
                if(nr>=0 && nr<m && nc>=0 && nc<n && visited[nr][nc]==0 && grid[nr][nc]==1){
                    q.add(new Pair(nr,nc,t+1));
                    visited[nr][nc]=2;
                    count++;
                }
            }
            
        }
        if(cntOne!=count) return -1;
        return time;
    }
}
