//Problem Link :    https://bit.ly/3cZMJXp

//{ Driver Code Starts
import java.util.*;
import java.lang.*;
import java.io.*;
class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while (T-- > 0) {
            String[] s = br.readLine().trim().split(" ");
            int V = Integer.parseInt(s[0]);
            int E = Integer.parseInt(s[1]);
            ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
            for (int i = 0; i < V; i++) adj.add(i, new ArrayList<Integer>());
            for (int i = 0; i < E; i++) {
                String[] S = br.readLine().trim().split(" ");
                int u = Integer.parseInt(S[0]);
                int v = Integer.parseInt(S[1]);
                adj.get(u).add(v);
                adj.get(v).add(u);
            }
            Solution obj = new Solution();
            boolean ans = obj.isCycle(V, adj);
            if (ans)
                System.out.println("1");
            else
                System.out.println("0");
        }
    }
}
// } Driver Code Ends

class Pair{
    int src,cameFrom;
    Pair(int src,int cameFrom){
        this.src=src;
        this.cameFrom=cameFrom;
    }
}

class Solution {
    
    public boolean isCycle(int v, ArrayList<ArrayList<Integer>> adj) {
        
        boolean visited[]=new boolean[v];
        for(int i=0;i<v;i++){
            if(!visited[i]){
                if(checkCycle(visited,i,adj))
                    return true;
            }
        }
        return false;
    }
    
    public boolean checkCycle(boolean[] visited,int node,ArrayList<ArrayList<Integer>> adj){
        
        visited[node]=true;
        Queue<Pair> q=new LinkedList<>();
        q.offer(new Pair(node,-1));
        
        while(!q.isEmpty()){
            int currNode=q.peek().src;
            int prevNode=q.peek().cameFrom;
            q.poll();
            
            List<Integer> currList=adj.get(currNode);
            
            for(int nodes : currList){
                if(!visited[nodes]){
                    visited[nodes]=true;
                    q.offer(new Pair(nodes,currNode));
                }else if(prevNode!=nodes)
                    return true;
            }
        }
        return false;
    }
}
