//Problem Link : https://bit.ly/3yR3dIB

//{ Driver Code Starts
import java.io.*;
import java.util.*;

class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader read =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while (t-- > 0) {
            int V = Integer.parseInt(read.readLine());
            
            ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
            
            for(int i=0; i<V; i++)
            {
                String S[] = read.readLine().split(" ");
                ArrayList<Integer> temp = new ArrayList<>();
                for(int j=0; j<V; j++)
                    temp.add(Integer.parseInt(S[j]));
                adj.add(temp);
            }

            Solution ob = new Solution();
            System.out.println(ob.numProvinces(adj,V));
        }
    }
}
// } Driver Code Ends

class Solution {
    static int numProvinces(ArrayList<ArrayList<Integer>> adj, int v) {
        int province=0;
        boolean[] visited=new boolean[v];
        
        ArrayList<ArrayList<Integer>> adjList=new ArrayList<>();
        
        for(int i=0;i<v;i++)
            adjList.add(new ArrayList<Integer>());
            
            
        //Creating Adjacency List
        for(int i=0;i<v;i++)
            for(int j=0;j<v;j++)
                if(adj.get(i).get(j)==1 && i!=j){
                    adjList.get(i).add(j);
                    adjList.get(j).add(i);
                }
                
        for(int i=0;i<v;i++){
            if(!visited[i]){
                dfsTraversal(i,visited,adjList);
                province++;
            }
        }
        
        return province;
        
    }
    
    static void dfsTraversal(int node,boolean[] visited,ArrayList<ArrayList<Integer>> adjList){
        List<Integer> currList=adjList.get(node);
        visited[node]=true;
        
        for(int num : currList){
            if(!visited[num]){
                dfsTraversal(num,visited,adjList);
            }
        }
    }
};
