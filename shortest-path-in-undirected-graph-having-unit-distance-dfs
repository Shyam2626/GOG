//Problem Link : https://bit.ly/3RGnHLH

class Solution {
    
    public int[] shortestPath(int[][] edges,int n,int m ,int src) {
        
        List<List<Integer>> adj = new ArrayList<>();
        
        for(int i=0;i<n;i++)
            adj.add(new ArrayList<>());
        
        for(int i=0;i<m;i++){
            adj.get(edges[i][0]).add(edges[i][1]);
            adj.get(edges[i][1]).add(edges[i][0]);
        }
        
        int distance[] = new int[n];
        Arrays.fill(distance,Integer.MAX_VALUE);
        
        dfs(distance,adj,src,0);
        
        for(int i=0;i<n;i++)
            if(distance[i]==Integer.MAX_VALUE)
                distance[i] = -1;
                
        return distance;
        
    }
    
    public void dfs(int[] distance,List<List<Integer>> adj,int node,int weight){
        
        distance[node] = weight;
        
        for(int currNode : adj.get(node)){
            if(distance[currNode] > distance[node]+1){
                dfs(distance,adj,currNode,weight+1);
            }
        }
    }
}
